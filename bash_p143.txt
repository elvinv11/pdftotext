El shell Bash

MacProgramadores

function ignorarhup
{
trap "" HUP
eval "$@"
trap - HUP
}
La opción - pasada a trap restaura la señal SIGHUP para que los siguientes
comandos que ejecutemos capturen esta señal, y sí que terminen al recibirla.
Ahora podemos lanzar un comando así:
$ ignorarhup du -d 1/ > ocupacion.txt
Actualmente existe un comando UNIX que hace esto mismo, que es el script
nohup cuya implementación se muestra en el Listado 8.4.
trap "" HUP
eval "$@" > nohup.out 2>&1
trap - HUP
Listado 8.4: Implementación de nohup

Es decir, básicamente el comando evalúa con eval los argumentos recibidos
y redirige tanto la salida estándar como la salida de errores estándar al
fichero nohup.out.
Por último vamos a comentar que existe un comando interno, llamado
disown, que recibe como argumento un job y elimina el proceso de la lista
de jobs controlados por el shell (con lo que no recibiría la señal SIGHUP
cuando el shell que lo lanzó termine). La opción -h (hook) de este comando
realiza la misma función de nohup, manteniendo al proceso en la lista de
jobs, pero no enviándole la señal SIGHUP cuando el shell termina. También
existe la opción -a (all) que libera a todos los procesos en background de la
lista de jobs del shell.

Pág 143

