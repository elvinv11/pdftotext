El shell Bash

MacProgramadores

3. Expresiones aritméticas
Como hemos visto ya en el apartado 1.2, las expresiones aritméticas van
encerradas entre $(( y ))1.
Las expresiones aritméticas, al igual que las variables y la sustitución de
comandos, se evalúan dentro de las comillas blandas, con lo que finalmente
vamos a formular la siguiente regla: Dentro de las comillas blandas se
evalúan sólo los elementos que van precedidos por un símbolo de $.
Estrictamente hablando esta regla no es del todo cierta, ya que las
expresiones aritméticas pueden no tener un símbolo de $ delante (podemos
escribir ((OPTIND -1)) en vez de $((OPTIND -1))), pero esto no se
recomienda hacerlo por uniformidad del lenguaje.
Ejercicio 6.2
Basándonos en el comando date +%j, que nos devuelve el número de día
Juliano, hacer un script que nos diga cuantos días quedan hasta el próximo
31 de Diciembre.
El comando se puede implementar restando a 365 días el número de días
transcurridos así:
$ echo "$(( 365 - $(date +%j) )) dias para el 31 de Dic"

3.1. Similitud con las expresiones aritméticas C
Las expresiones aritméticas de Bash se han diseñado de forma equivalente a
las expresiones C2, luego si conoce C ya sabe escribir expresiones aritméticas
complejas en Bash. Por ejemplo $((x+=2)) añade 2 a x. Si no conoce C o
Java, le recomendamos consultar estos operadores en un manual, ya que en
el resto de este tutorial vamos a suponer que el lector conoce estos
operadores.
Aunque algunos operadores (p.e. * o los paréntesis) son caracteres
especiales para Bash, no hace falta precederlos por el carácter de escape
siempre que estén dentro de $((...)). Igualmente, a las variables que
están dentro de la expresión aritmética no hace falta precederlas por $ para
obtener su valor.

1

También podemos encerrarlas entre $[ y ], pero esta forma está desestimada por Bash,
con lo que no se recomienda usarla.
2
Además bash añade el operador ** para exponenciar que no forma parte de C.
Pág 96

