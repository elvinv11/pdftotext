El shell Bash

MacProgramadores

El operador de redirección < se pueden usar de forma aislada para hacer algo
parecido al comando touch. Para ello usamos:
$ > nuevo.txt
Que crea el fichero nuevo.txt si no existe, o lo deja con 0 bytes si éste sí
que existe.
En Bash existe la opción noclobber que por defecto no está activa (y que se
puede activar con el comando set -o noclobber) que hace que si
intentamos sobrescribir un fichero con el operador > (redirigir a un fichero
existente) el shell produzca un error y no nos deje ejecutar esta operación.
Podemos forzar que se sobrescriban los ficheros, incluso con esta opción
activada, con el operador >|.

1.1. Los descriptores de fichero
Como ya hemos comentado en el apartado 4 del Tema 1, toda aplicación
tiene siempre tres descriptores de fichero abiertos, el 0 para la entrada
estándar (stdin), el 1 para la salida estándar (stdout), y el 2 para la salida de
errores estándar (stderr).
Nos quedan los números del 3 al 9 para abrir descriptores adicionales1. Esto
se hace así porque a veces es útil asignar un número de descriptor adicional a
los descriptores estándar como si fueran una copia adicional de este enlace.
Otras veces resulta útil asignar un número de descriptor adicional a un fichero
al que luego nos vamos a referir por su descriptor.
El operador n>&m enlaza el descriptor n en el descriptor de salida m. Por
ejemplo ls -yz >> resultado.log 2>&1 captura el resultado de la
opción ilegal -yz y la envía por stdout, en vez de a stderr. Es decir si
hacemos:
$ ls -yz >> resultado.log
ls: illegal option -- y
usage: ls [-ABCFGHLPRSTWZabcdfghiklnoqrstuvx1] [file ...]
$ ls -yz >> resultado.log 2>&1
En el primer comando stderr va a la pantalla, y en el segundo va a el fichero
resultado.log.
Es importante tener en cuenta que ls -yz 2>&1 >> command.log no
daría el mismo resultado porque stdout se debe cambiar antes de redirigir
1

El descriptor 5 puede dar problemas ya que cuando el shell ejecuta un subshell el
subproceso hereda este descriptor.
Pág 109

