El shell Bash

MacProgramadores

Ahora podemos pasar los argumentos recibidos por el script a la función
usando cualquiera de las dos variables:
CuentaArgumentos $*
CuentaArgumentos $@
Y al ejecutarlo obtenemos:
$ recibe hola adios
Recibidos 2 argumentos
Recibidos 2 argumentos
Pero el no encerrar tanto $* como $@ entre comillas al llamar a una función
tiene un efecto lateral por el que no se recomienda. Este efecto se produce
cuando recibimos argumentos que contienen espacios:
$ recibe "El perro" "La casa"
Recibidos 4 argumentos
Recibidos 4 argumentos
El problema está en que se pierden las comillas de las variables y se
interpreta cada palabra como un parámetro de la función.
Sin embargo, si entrecomillamos $* y $@:
CuentaArgumentos "$*"
CuentaArgumentos "$@"
Obtenemos el siguiente resultado:
$ recibe "El perro" "La casa"
Recibidos 1 argumentos
Recibidos 2 argumentos
Es decir, entrecomillar $* tiene el efecto de que se convierte en una sola
palabra, mientras que si entrecomillamos $@ cada argumento es una palabra.
En consecuencia obtenemos las siguentes reglas generales:
1. Siempre conviene entrecomillar las variables $* y $@ para evitar que
los argumentos que contengan espacios sean mal interpretados.
2. Si queremos cambiar el delimitador que separa los argumentos
(usando IFS) debemos utilizar @* entrecomillado.
3. Si lo que queremos es pasar los argumentos a una función debemos de
usar $@ entrecomillado.

Pág 54

