El shell Bash

MacProgramadores

7. Subshells
Vamos a ver otra técnica de comunicación entre procesos, que es la
comunicación entre un subshell y el shell padre. En el Tema 3 vimos que
cuando ejecutábamos un script, estábamos creando un proceso distinto en el
que se ejecutaba el script. Ahora vamos a ver que dentro de un script, un
conjunto de comandos pueden ejecutarse también como un proceso aparte.
En el apartado 3 del Tema 7 vimos los bloques de comandos, donde
podíamos encerrar un conjunto de comandos entre llaves, y redirigir su
entrada o salida estándar. Los subshells son parecidos a los bloques de
comandos, donde también podemos redirigir su entrada y salida estándar,
sólo que ahora se encierran los comandos entre paréntesis y el subshell, a
diferencia del bloque de comandos, se ejecuta en un proceso aparte. Por
ejemplo, el Listado 8.6 muestra un subshell que genera los números del 0 al
9, y después se los pasa por un pipe a sort para que los ordene de mayor a
menor.
(
for ((i=0;i<=9;i++))
do
echo $i
done
) | sort -r
Listado 8.6: Ejemplo de subshell

La principal diferencia entre un subshell y un bloque de comandos es que el
primero se ejecuta en un proceso aparte, con lo que es menos eficiente, pero
a cambio no modifica variables del shell actual, con lo que existe mayor
encapsulación1. Por ejemplo, si vamos a fijar un trap, lo podemos fijar en un
subshell para no afectar al resto del script.
Conviene aclarar que cuando ejecutamos un subshell se hereda del proceso
padre: El directorio actual, las variables de entorno exportadas y la entrada y
salida estándar, así como la de errores. Y no se hereda: Las variables no
exportadas y los traps de señales.

1

Recuerdese que siempre que ejecuamos un comando externo se ejecuta en un proceso
aparte, con lo que el uso de subshell no enlentece mucho más.
Pág 148

