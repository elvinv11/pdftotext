El shell Bash

MacProgramadores

La convención de la programación de shells dice que las preguntas que
hagamos al usuario deben hacerse emitiendo un mensaje por la stderr. La
razón de usar esta salida es que cuando los usuarios ejecutan una tarea en
background suelen redirigir (a /dev/null) la stdout para evitar que en su
terminal aparezcan mensajes de estado que no desea ver. Luego la forma de
hacer una pregunta al usuario debería de ser:
echo -n "Responda a esta pregunta: " &>2
read respuesta
En este caso, si el usuario escribe una frase con varias palabras separadas
por espacio, toda la frase se asigna a la variable respuesta, ya que es la
última variable que recibe read.
El comando read es muy útil para hacer un bucle que itere por ficheros con
espacios. En el Listado 5.3 hicimos un bucle for que recorría los ficheros de
un directorio. Para obtener los ficheros de un directorio usamos el comando
ls con la opción -1. Dado que los ficheros podía contener espacios,
asignamos como delimitador (IFS) el retorno de carro. En el Listado 7.6
hemos vuelto a implementar esta función con read. Dado que read sólo
recibe la variable fichero, el comando devolverá toda la línea aunque tenga
espacios.
#!/bin/bash
# Funcion que lista los ejecutables de un directorio
function ListaEjecutables
{
ls -1 $1 | while read fichero
do
path_fichero="$1/$fichero"
if [ -x $path_fichero ]; then
echo $path_fichero
fi
done
}
Listado 7.6: Función que lista los ejecutables de un directorio

Resulta que el comando interno select, que vimos en el Tema 5, también
pide una opción usando stderr.
Aunque el comando read es una primitiva básica de la programación
convencional. En este tutorial no ha aparecido hasta ahora porque es un
"patito feo" de la programación de scripts, ya que los scripts deberían de ser
realizados uniendo comandos independientes cut, grep, soft, que van
pasándose un texto el cual van procesando. El uso de read rompe esta
forma de programar, con lo que se recomienda usarlo con moderación. A lo
Pág 120

