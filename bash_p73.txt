El shell Bash

MacProgramadores

Muchas veces se utiliza el operador && para implementar un if. Para ello se
aprovecha el hecho de que si el primer operando no se cumple, no se evalua
el segundo. Por ejemplo si queremos imprimir un mensaje cuando
elementos sea 0 podemos hacer:
[ elementos = 0 ] && echo "No quedan elementos"
El operador || por contra ejecuta el primer comando, y sólo si éste falla se
ejecuta el segundo. Por ejemplo:
if cp /tmp/001.tmp ~/d.tmp || cp /tmp/002.tmp ~/d.tmp
then
····
fi
Aquí si el primer comando tiene éxito ya no se ejecuta el segundo comando
(ya que tiene éxito el primer comando, con que se cumple uno de sus
operandos).
Obsérvese que a diferencia de C, el código de terminación 0 es el que indica
verdadero, y cualquier otro código indica falso.
Por último el operador ! niega un código de terminación. Por ejemplo:
if ! cp /tmp/001.tmp ~/d.tmp; then
Procesa el error
fi

1.5. Test condicionales
La sentencia if lo único que sabe es evaluar códigos de terminación. Pero
esto no significa que sólo podamos comprobar si un comando se ha ejecutado
bien. El comando interno test nos permite comprobar otras muchas
condiciones, que le pasamos como argumento, para acabar devolviéndonos
un código de terminación. Una forma alternativa al comando test es el
operador [] dentro del cual metemos la condición a evaluar, es decir, test
cadena1 = cadena2 es equivalente a [ cadena1 = cadena2 ]. Los
espacios entre los corchetes y los operandos, o entre los operandos y el
operador de comparación = son obligatorios. Con lo que es coherente con la
sintaxis de if que hemos visto en el apartado anterior.
Usando los test condicionales podemos evaluar atributos de un fichero (si
existe, que tipo de fichero es, que permisos tiene, etc.), comparar dos
ficheros para ver cual de ellos es más reciente, comparar cadenas, e incluso
comparar los números que almacenan las cadenas (comparación numérica).

Pág 73

