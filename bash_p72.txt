El shell Bash

MacProgramadores

}
Como la función cd() tiene preferencia sobre el comando interno cd, en
principio al llamar a cd desde la función cd() se ejecuta la función y no el
comando, con lo que entraríamos en un bucle infinito. Para ejecutar el
comando interno y no la función podemos usar el comando interno builtin.
Obsérvese que, tal como se explicó en el apartado 2.3 del Tema 4,
entrecomillar "$@" es necesario por si el nombre de directorio tiene espacios.
Tal como está ahora la función, cambia de directorio e imprime el mensaje
pero no devuelve el código de terminación del comando interno cd. Para ello
tendríamos que modificar la función de la siguiente forma:
cd()
{
builtin cd "$@"
local ct=$?
echo "$OLDPWD -> $PWD"
return $ct
}
Obsérvese que tenemos que guardar el código de terminación en una
variable, porque sino devolveríamos el código de terminación del comando
echo y no del comando cd.

1.4. Operadores lógicos y códigos de terminación
Podemos combinar varios códigos de terminación de comandos mediante los
operadores lógicos and (representada con &&) or (representada con ||) y
not (representada con !).
Estas operaciones, al igual que en otros lenguajes como C o Java, funcionan
en shortcut, es decir el segundo operando sólo se evalúa si el primero no
determina el resultado de la condición. Según esto la operación:
if cd /tmp && cp 001.tmp $HOME ; then
····
fi
Ejecuta el comando cd /tmp, y si éste tiene éxito (el código de terminación
es 0), ejecuta el segundo comando cp 001.tmp $HOME, pero si el primer
comando falla ya no se ejecuta el segundo porque para que se cumpla la
condición ambos comandos deberían de tener éxito (si un operando falla ya
no tiene sentido evaluar el otro).

Pág 72

