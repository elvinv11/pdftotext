El shell Bash

MacProgramadores

6. Corutinas
Llamamos corutinas a un conjunto de dos o más procesos ejecutados
concurrentemente por el shell, y opcionalmente con la posibilidad de
comunicarse ente ellos.
Un pipe es un ejemplo de corutinas. Cuando invocamos un pipe, p.e.
ls|more, el shell llama a un conjunto de primitivas, o llamadas al sistema.
En concreto, el shell dice al SO que realice las siguientes operaciones (si es
usted programador C, entre paréntesis le indicamos la primitiva del SO
usada):
1. Crear dos procesos que llamaremos P1 y P2 (usa la primitiva folk(),
la cual crea otro proceso, y devuelve el ID del nuevo proceso al hilo del
padre, y el ID 0 al proceso hijo).
2. Conecta la salida estándar de P1 a la entrada estándar de P2 (usando
la función pipe()).
3. Ejecuta /bin/ls en P1 (usando exec() que reemplaza la imagen del
proceso actual por una nueva imagen).
4. Ejecuta /bin/more en el proceso P2 (usando exec()).
5. Espera a que ambos procesos acaben (usando la primitiva wait()).
Si no se necesita que dos procesos se comuniquen entre ellos, la forma de
ejecutarlos es más sencilla. Por ejemplo, si queremos lanzar los procesos
comer y beber como corutinas, podemos hacer el siguiente script:
comer &
beber
Si beber es el último proceso en acabar, esta solución funciona, pero si
comer sigue ejecutando después de que acabe de ejecutarse el script, comer
se convertiría en un proceso huérfano (también llamado zombie).
En general esto es algo indeseable, y para solucionarlo existe el comando
interno wait, el cual para al proceso del script hasta que todos los procesos
de background han acabado. Luego la forma correcta de lanzar las corutinas
anteriores sería:
comer &
beber
wait
El comando interno wait también puede recibir como argumento el ID o el
número de job del proceso al que queremos esperar.

Pág 146

